// 变量

package main

import "fmt"

// 数据类型
// 1.布尔型
//
//	布尔型的值只可以是常量 true 或者 false。
var a bool = true

// 2.字符串类型:
//
//	字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。
var b string = "b"

// 3.数字类型
// 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。
//  uint8: 无符号 8 位整型 (0 到 255)
//  uint16: 无符号 16 位整型 (0 到 65535)
//  uint32: 无符号 32 位整型 (0 到 4294967295)
//  uint64: 无符号 64 位整型 (0 到 18446744073709551615)
//  int8: 有符号 8 位整型 (-128 到 127)
//  int16: 有符号 16 位整型 (-32768 到 32767)
//  int32: 有符号 32 位整型 (-2147483648 到 2147483647)
//  int64: 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)
//  float32: IEEE-754 32位浮点型数
//  float64: IEEE-754 64位浮点型数
//  complex64: 32 位实数和虚数
//  complex128: 64 位实数和虚数
//  byte: 类似 uint8
//  rune: 类似 int32
//  uint: 32 或 64 位
//  int: 与 uint 一样大小
//  uintptr: 无符号整型，用于存放一个指针

// 4.派生类型:
//  指针类型（Pointer）
//  数组类型
//  结构化类型(struct)
//  Channel 类型
//  函数类型
//  切片类型
//  接口类型（interface）
//  Map 类型

// 变量声明
var ( // 这种因式分解关键字的写法一般用于声明全局变量
	ga int
	gb bool
)

func createVariable() {
	// Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。
	// 仅指定变量类型时，变量默认为零值，否则正常赋值
	var aa bool    // 一般形式
	var ab, ac int // 多变量声明
	var ad string = "ad"
	fmt.Println(aa)
	fmt.Println(ab, ac)
	fmt.Println(ad)

	// 零值
	//  数值类型（包括complex64/128）为 0
	//  布尔类型为 false
	//  字符串为 ""（空字符串）
	//  以下几种类型为 nil：
	//   var a *int
	//   var a []int
	//   var a map[string] int
	//   var a chan int
	//   var a func(string) int
	//   var a error

	// 未指定变量类型时，根据值自行判定变量类型。
	var ba = 1.1
	fmt.Println(ba)

	// 简短形式声明（只能被用在函数体内，而不可以用于全局变量的声明与赋值）
	// 声明时类型将自动推断
	// 不可对已声明的变量重新使用:=声明
	// 未使用声明的局部变量时会抛出编译错误（全局变量允许声明但不使用）
	ca := "test"
	fmt.Println(ca)

	// 变量名"_"用于抛弃值，或称为只写变量
	_, cb := 5, 7 // 值5将被抛弃
	fmt.Println(cb)

	// 局部变量：在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。
	// 全局变量：在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。
	// 备注：
	// 1.局部变量不会一直存在，在函数被调用时存在，函数调用结束后变量就会被销毁，即生命周期。
	// 2.Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。
}

func main() {
	createVariable()
}
